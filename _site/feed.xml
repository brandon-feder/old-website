<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-24T11:53:54-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Brandon’s Website</title><subtitle>This is Brandon Feder&apos;s website. Here he posts information about the projects he is working on as well as resources people he is working with may find useful.</subtitle><entry><title type="html">2nd Brookhaven Internship</title><link href="http://localhost:4000/current/2022/04/19/bnl-internship-2.html" rel="alternate" type="text/html" title="2nd Brookhaven Internship" /><published>2022-04-19T00:00:00-04:00</published><updated>2022-04-19T00:00:00-04:00</updated><id>http://localhost:4000/current/2022/04/19/bnl-internship-2</id><content type="html" xml:base="http://localhost:4000/current/2022/04/19/bnl-internship-2.html"><![CDATA[<p>TODO: Finish</p>]]></content><author><name></name></author><category term="current" /><summary type="html"><![CDATA[TODO: Finish]]></summary></entry><entry><title type="html">Grandpa’s 2022 Birthday</title><link href="http://localhost:4000/2022/04/19/grandpa-2022-birthday.html" rel="alternate" type="text/html" title="Grandpa’s 2022 Birthday" /><published>2022-04-19T00:00:00-04:00</published><updated>2022-04-19T00:00:00-04:00</updated><id>http://localhost:4000/2022/04/19/grandpa-2022-birthday</id><content type="html" xml:base="http://localhost:4000/2022/04/19/grandpa-2022-birthday.html"><![CDATA[<p>For my Grandfather’s 2022 birthday, I wrote a program that renders the <a href="https://en.wikipedia.org/wiki/Buddhabrot" target="_blank">Budhabrot fractal</a> at a very high definition using my computer’s NVIDIA 2060 Super. I then bought him a wall-print from <a href="www.shutterfly.com" target="_blank">Shutterfly</a>.</p>

<h2 id="what-is-the-budhabrot">What is the Budhabrot?</h2>
<p>Two understand the Budhabrot fractal, you need to understand what how to render the Mandelbrot fractal. I would encourage you to watch these two videos:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/NGMRB4O922I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/2JUAojvFpCo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>The algorithm that draws the Budhabrot fractal is very slightly different from the one used to draw the Mandelbrot fractal.</p>

<p>When drawing the simplest representation of the Mandelbrot fractal, you color every point, \(c\), black if</p>

\[z_{n+1} = z_{n} + c \tag{1}\]

<p>does not diverge where \(z_0 = 0\). Every pixel in the image is therefore black or white, on or off, divergent or not.</p>

<p><img src="/assets/mandel-bw.jpg" alt="Mandelbrot Fractal" /></p>

<p>The fancy colorings online show other aspects of the set itself, most commonly the rate of divergence of those points not in the set. However, that is not important right now.</p>

<p>Unlike the Mandelbrot set, the drawing of the Budhabrot fractal is a heatmap where each pixel has a “heat” or “activity” value associated with it. To figure out this “heat,” you choose millions, billions, or in my case trillions of random values for \(c\). Then, for every \(z_n\) generated from (1), you increment the pixel’s value for which \(z_n\) is in. This video illustrates the algorithm well:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/4V5EIlFTqrk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="the-actual-programming">The Actual Programming</h2>

<p>For the program itself, I cloned one of my old Mandelbrot set rendering codes and adjusted it slightly to render the Budhabrot instead. I then implemented a trick that uses Monte-Carlo importance estimation to decrease the computation time. There are a few other things going on that you can read about here:</p>

<ul>
  <li><a href="https://benedikt-bitterli.me/buddhabrot/" target="_blank">https://benedikt-bitterli.me/buddhabrot/</a></li>
</ul>

<p>Finally, I referenced this persons Lisp program:</p>

<ul>
  <li><a href="https://erleuchtet.org/2010/07/ridiculously-large-buddhabrot.html" target="_blank">https://erleuchtet.org/2010/07/ridiculously-large-buddhabrot.html</a></li>
</ul>

<p>The original code, which you can find on my GitHub, was already GPU accelerated. I ran the render for around 22 hours. The image after some de-noise and lossless JPG compression takes just over 200Mb of storage. Here is a VERY-compressed version of the final render:</p>

<p><img src="/assets/buddhabrot_small_compressed.jpg" alt="Budhabrot Compressed" target="_blank" /></p>

<p>You can get the full render from my Google Drive <a href="https://drive.google.com/drive/folders/1eL0HmrvK0zet2toaUuTkjs0Bk9ki8IOV?usp=sharing" target="_blank">here</a>.</p>

<div class=" alert alert-danger">Do not open the normal and definitely not the huge photo unless you know what you are doing. It will likely crash your computer. If you don't know if you know what you are doing, then you don't know what you are doing.</div>

<p>If you understand the math behind the Mandelbrot and Budhabrot set’s, you can construct quite a nice allusion between the divergent points and this song:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/sdAOoB5ML0Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name></name></author><summary type="html"><![CDATA[For my Grandfather’s 2022 birthday, I wrote a program that renders the Budhabrot fractal at a very high definition using my computer’s NVIDIA 2060 Super. I then bought him a wall-print from Shutterfly.]]></summary></entry><entry><title type="html">Research Project</title><link href="http://localhost:4000/current/2022/04/19/research-proj.html" rel="alternate" type="text/html" title="Research Project" /><published>2022-04-19T00:00:00-04:00</published><updated>2022-04-19T00:00:00-04:00</updated><id>http://localhost:4000/current/2022/04/19/research-proj</id><content type="html" xml:base="http://localhost:4000/current/2022/04/19/research-proj.html"><![CDATA[<p>I am participating in my school’s (Princeton International School of Math and Science [PRIMS]) research program. In this program we are given two years to do research in some STEM field that we are interested in.</p>

<p>I am researching an area of mathematical-logic which studies relationships between formal languages using tools from abstract algebra and category theory.</p>

<p>This is more of an informal overview: I skip over a lot and make some gross generalizations and simplifications in order to get the general idea across. I also rely on your mathematical intuition to fill in the gaps. Finally, I attached some links at the bottom of each subsection if you want to read more.</p>

<h2 id="formal-systems">Formal Systems</h2>
<p>“A formal system is an abstract structure used for inferring theorems from axioms according to a set of rules.” (<a href="https://en.wikipedia.org/wiki/Formal_system" target="_blank">Wikipedia: Formal Systems</a>) Often, these systems are formalized in terms of a formal language, a set of axioms, and a set of inference rules.</p>

<p>The formal language gives the set of rules by which sentences, or formulas, in the language are syntactically correct (e.g. make syntactic “sense”). Note the distinction from semantic correctness (logical “sense”). In English, the sentences “People who read books are smart. Joe reads books. Joe is not smart.” are syntactically correct: Each sentence starts with a capital letter, ends with a period, etc. However, it does not make logical sense. It is therefore not semantically correct. If a sentence/formula is syntactically correct, it is said to be <strong>well-formed</strong>. Conversely, a <strong>well-formed formula</strong> is syntactically correct.</p>

<p>The inference rules tell how one well-formed formula (conclusion) can be logically inferred, or proved, from a set of given axioms (premises).</p>

<p>A quick example of such a system is given by sentential logic (aka propositional calculous). This is the “generic”-system you mat have learned about in an elementary computer science class. The set of “operators” are called <strong>truth-functional connectives</strong> and include \(\land\) (and), \(\lor\) (or), \(\neg\) (not), \(\rightarrow\) (if/if … then …), and \(\leftrightarrow\) (iff / if .. only if …). These connectives are juxtaposed by “variables” called <strong>atomic symbols</strong> such as \(a\), \(b\), or \(c\). The atomic symbols may have the value \(T\) (true) or \(F\) (false).</p>

\[(a \lor b) \lor (\neg a \land \neg b) \tag{1}\]

<p>is an example of a well-formed formula according the the language of sentential logic (LSL). However,</p>

\[ab\land c \neg\]

<p>is not. An axiom of sentential logic is</p>

\[a \lor \neg a\]

<p>which is assumed always true. The sole inference rule of sentential logic is</p>

\[\frac{F, F \rightarrow G}{G}\]

<p>where \(F\) and \(G\) are well-formed by LSL. This inference rule may read “If \(F\) [is true], and \(F\) implies \(G\), then \(G\) [is true].” Doesn’t this make sense?</p>

<p>A well-formed formula is a <strong>tautology</strong> if every possible substitution of it’s atomic symbols with \(T\) or \(F\) leads to a \(T\) “outcome.” These substitutions are called <strong>valuations</strong> or <strong>interpretations</strong>. Formula (1) is an example of a tautology since no matter what you substitute for \(a\) and \(b\), the result will be \(T\). Try it!</p>

<p>A well-formed formula is called a <strong>theorem</strong> if it is derivable, or provable, by applying the systems inference rules to it’s axioms.</p>

<p>A system is <strong>complete</strong> if every tautology is a theorem.</p>

<p>Sentential logic is complete.</p>

<p>Resources:</p>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Formal_system" target="_blank">Wikipedia: Formal Systems</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Completeness_(logic)" target="_blank">Wikipedia: Completeness (logic)</a></li>
  <li><a href="https://mathworld.wolfram.com/PropositionalCalculus.html" target="_blank">Wolfram MathWorld: Propositional Calculous</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Propositional_calculus" target="_blank">Wikipedia: Propositional Calculous</a></li>
</ul>

<h2 id="first-order-logic">First-Order Logic</h2>
<p><strong>First-order logic</strong>, or predicate calculous, is a class of systems extended from sentential logic. In addition to the functionality given by sentential logic, first-order logic allows for the use of qualifiers such as \(\forall\) (forall) and \(\exists\) (exists), non-logical atomic symbols, as well as predicates which describe relations between these non-logical atomic symbols. Non-logical atomic symbols refer to those “variables” which need not have the value \(T\) or \(F\).</p>

<p>Zermelo-Fraenkel set theory (ZF) is the standard formalization of set theories’ formal system. This will be very familiar. In this system \(\in\) is a predicate describing a relation between some object (which may be a set itself) and a set. Consider the following axiom in ZF set theory: \begin{align}
    \forall x \forall y [\forall z(z \in x \leftrightarrow z \in y) \rightarrow x=y]
\end{align} Can you guess what this axiom defines?</p>

<p>Resources:</p>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/First-order_logic" target="_blank">Wikipedia: First-order Logic</a></li>
</ul>

<h2 id="turing-machines">Turing Machines</h2>

<p>A <strong>decision problem</strong> is one which has a yes/no or true/false answer. A problem is <strong>decidable</strong> if it has such an answer. Otherwise, the problem is said to be <strong>undecidable</strong>.</p>

<p>“A <strong>Turing machine</strong> is a mathematical model of computation that defines an abstract machine that manipulates symbols on a strip of tape according to a table of rules” (<a href="https://en.wikipedia.org/wiki/Turing_machine" target="_blank">Wikipedia: Turing Machine</a>). You can think of it as an algorithm. The <strong>halting problem</strong> is a decision problem that asks to determine whether a Turing machine will halt (e.g. terminate) for a given input.</p>

<p>A set is <strong>recursively enumerable</strong> if it’s elements can be listed by a Turing machine.</p>

<p>Resources:</p>
<ul>
  <li>Basic Turing machine stuff: <a href="https://en.wikipedia.org/wiki/Turing_machine" target="_blank">Wikipedia: Turing Machine</a></li>
  <li>More in-depth Turing machine info: <a href="https://plato.stanford.edu/entries/turing-machine/" target="_blank">Stanford Encyclopedia of Philosophy: Turing Machines</a>. The <em>Stanford Encyclopedia of Philosophy</em> has a lot of great logic-ish stuff.</li>
</ul>

<h2 id="gödels-first-incompleteness-theorems">Gödels First Incompleteness Theorems</h2>

<p>A formal system is <strong>recursively enumerable</strong> if it’s theorems form a recursively enumerable set.</p>

<p><strong>Gödel’s Incompleteness Theorem</strong> states that no recursively enumerable formal system strong enough to describe all truths about naturals is complete. In other words, in every recursively enumerable … there are tautologies that are not theorems. Furthermore, there are a countably infinite number of these formulas. The weakest system strong enough to describe all truths about the naturals is given by Robinson’s arithmetic, though Peano arithmetic is a stronger and more used system.</p>

<p>ZF, and stronger systems such as ZFC (ZF with axiom of choice), satisfy all the “requirements” of Gödels Incompleteness Theorem and are therefore incomplete. The continuum hypothesis is an example of one of those well-formed formulas. The same is true for the halting problem in the context of Turing machines. Extensions of ZF can assert the truthfulness of the continuum hypothesis as an axiom without leading to contradictions. Can you explain why? However, these systems will still have other unprovable tautologies.</p>

<p>Resources:</p>
<ul>
  <li><a href="https://plato.stanford.edu/entries/goedel-incompleteness/" target="_blank">Stanford Encyclopedia of Philosophy: Gödel’s Incompleteness Theorem</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Robinson_arithmetic" target="_blank">Wikipedia: Robinson arithmetic</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Peano_axioms#Peano_arithmetic_as_first-order_theory" target="_blank">Wikipedia: Peano arithmetic</a></li>
</ul>

<h1 id="my-research-project">My Research Project</h1>
<p>For my research project, I am studying the incompleteness of formal languages and their relationship to one another. As I learn more about the field, I hope to find a more specific question to ask. The question I put down on my proposal was more of a space-filler than anything else. I am having trouble asking a good question without understanding more about mathematical logic. That being said, there is something called Vaught’s Conjecture that, assuming CH is false, is very poorly understood. In addition, there is something called the Finite Spectrum problem which is also poorly understood. My plan is to spend another few months learning about Model theory before I choose something more specific. Both these conjectures I could try to prove for some subset of the Models they concern, similarly to how Atticus Wang and Arun Kannan proved “stability results” for a special subset of the orthogonal groups <a href="https://arxiv.org/abs/2202.09910">here</a>. That being said, I would like to learn more mathematical logic before I commit to something.</p>]]></content><author><name></name></author><category term="current" /><summary type="html"><![CDATA[I am participating in my school’s (Princeton International School of Math and Science [PRIMS]) research program. In this program we are given two years to do research in some STEM field that we are interested in.]]></summary></entry><entry><title type="html">My Website</title><link href="http://localhost:4000/2022/04/19/website.html" rel="alternate" type="text/html" title="My Website" /><published>2022-04-19T00:00:00-04:00</published><updated>2022-04-19T00:00:00-04:00</updated><id>http://localhost:4000/2022/04/19/website</id><content type="html" xml:base="http://localhost:4000/2022/04/19/website.html"><![CDATA[<p>My website, the place where you are reading this, was a small project I worked on for 3-4 days. I wanted one place to post records of the projects I have worked on, as well as resources for people working on those projects with me.</p>

<p>I wrote this website using <a href="https://jekyllrb.com/">Jekyll</a>, an open source, simple, static website generator. I setup the websites layout, header, etc. using HTML and SASS, but Jekyll allows me to type the main content on each page in Markdown.</p>

<p>In addition, Jekyll provides support for <a href="https://shopify.github.io/liquid/">Liquid</a> templating which allows automatic-writing of HTML based off of variables given by Jekyll or defined at the top of each page in a YAML header. For an example, look at the <a href="https://github.com/brandon-feder/brandon-feder.github.io/edit/main/projects.md]">source code for <code class="language-plaintext highlighter-rouge">/projects.md</code></a>.</p>

<p>I included <a href="https://getbootstrap.com/">Bootstrap 5</a> and the new Bootstrap 5 icons, though I could have probably done without the former.</p>

<p>I included <a href="https://www.mathjax.org/">MathJax</a> so I could write LaTeX math equations. For example, the LaTeX <code class="language-plaintext highlighter-rouge">\int_m^{2m} \frac{1}{x} dx = \ln(2)</code> tells MathJax to render</p>

\[\int_m^{2m} \frac{1}{x} dx = \ln(2)\]

<p>Unfortunately, MathJax does not allow the use of the <code class="language-plaintext highlighter-rouge">usepackage</code> command meaning that I can only use the base LaTeX functionality.</p>

<p>Finally, I got <a href="https://kramdown.gettalong.org/">Kramdown</a>, Jekyll’s Markdown interpreter, to use <a href="http://rouge.jneen.net/">Rogue</a> to perform language-specific syntax highlighting:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">math</span>
<span class="n">math</span><span class="p">.</span><span class="n">pi</span> <span class="o">=</span> <span class="mi">3</span>

<span class="k">def</span> <span class="nf">circle_area</span><span class="p">(</span><span class="n">r</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">math</span><span class="p">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">r</span> <span class="o">*</span> <span class="n">r</span>

<span class="n">r</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Enter Radios: "</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"The Area Is:"</span><span class="p">,</span> <span class="n">circle_area</span><span class="p">(</span><span class="n">r</span><span class="p">))</span>
</code></pre></div></div>

<p>That’s it! If you want to set something like this up for yourself, feel free to clone <a href="https://github.com/brandon-feder/brandon-feder.github.io">this project
‘s github repo</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[My website, the place where you are reading this, was a small project I worked on for 3-4 days. I wanted one place to post records of the projects I have worked on, as well as resources for people working on those projects with me.]]></summary></entry></feed>